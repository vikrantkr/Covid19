{"version":3,"sources":["images/image.png","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toString","url","fetchData","country","a","changableURL","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handaleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","InputLabel","shrink","id","Select","defaultValue","labelId","onChange","e","target","MenuItem","i","key","App","state","fetchedData","setState","this","src","coronaImage","alt","image","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,mC,yDCC3CD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,8NCiEpJC,EA5DD,SAAC,GAAoD,IAAD,IAAlDC,KAAMC,EAA4C,EAA5CA,UAAUC,EAAkC,EAAlCA,UAAUC,EAAwB,EAAxBA,OAAOC,EAAiB,EAAjBA,WAC7C,OAAIH,EAIA,yBAAKI,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOY,WACxE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxB,EAAUyB,MAAOC,SAAU,IAAKC,UAAU,OAEtE,kBAACR,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GACzC,IAAIO,KAAKzB,GAAY0B,YAE1B,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOJ,YACxE,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAUwB,MAAOC,SAAU,IAAKC,UAAU,OAEtE,kBAACR,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GACzC,IAAIO,KAAKzB,GAAY0B,YAE1B,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,wCAKR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAKX,IAAOH,SACxE,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKtB,EAAOuB,MAAOC,SAAU,IAAKC,UAAU,OAEnE,kBAACR,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GACzC,IAAIO,KAAKzB,GAAY0B,YAE1B,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,2CAhDT,e,yBCNTQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAaJ,EACdE,IACCE,EAAa,GAAD,OAAIJ,EAAJ,sBAAqBE,IAHhB,kBAMoDG,IAAMC,IAAIF,GAN9D,2BAMTnC,KAAQC,EANC,EAMDA,UAAWC,EANV,EAMUA,UAAWC,EANrB,EAMqBA,OAAQC,EAN7B,EAM6BA,WAN7B,kBAOV,CAAEH,YAAWC,YAAWC,SAAQC,eAPtB,4FAAH,sDAaTkC,EAAc,uCAAG,gCAAAJ,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAEf/B,EAFe,EAEfA,KAEDuC,EAAavC,EAAKwC,KAAI,SAACC,GAAD,MAAc,CACtCxC,UAAUwC,EAAUxC,UAAUyC,MAC9BvC,OAAOsC,EAAUtC,OAAOuC,MACxBC,KAAKF,EAAUG,eAPG,kBASfL,GATe,yFAAH,qDAedM,EAAS,uCAAE,8BAAAX,EAAA,+EAEgBE,IAAMC,IAAN,UAAaN,EAAb,eAFhB,uBAEHc,EAFG,EAET7C,KAAM6C,UAFG,kBAGTA,EAAUL,KAAI,SAACP,GAAD,OAAWA,EAAQa,SAHxB,yFAAF,qD,yBCmCPC,EA/DF,SAAC,GAA+C,IAAD,IAA7C/C,KAAMC,EAAuC,EAAvCA,UAAUE,EAA6B,EAA7BA,OAAOD,EAAsB,EAAtBA,UAAW+B,EAAW,EAAXA,QAAW,EAEvBe,mBAAS,IAFc,mBAEjDP,EAFiD,KAEtCQ,EAFsC,KAIxDC,qBAAU,YACQ,uCAAE,sBAAAhB,EAAA,kEACZe,EADY,SACOX,IADP,6EAAF,qDAGda,KACF,IAEF,IAAMC,EACFX,EAAUY,OACN,kBAAC,IAAD,CACArD,KAAM,CACFsD,OAAOb,EAAUD,KAAI,qBAAEG,QACvBY,SAAS,CAAC,CACNvD,KAAKyC,EAAUD,KAAI,qBAAEvC,aACrBuD,MAAM,WACNC,YAAY,UACZC,MAAK,GAEP,CACE1D,KAAKyC,EAAUD,KAAI,qBAAErC,UACrBqD,MAAM,SACNC,YAAY,MACZE,gBAAgB,oBAChBD,MAAK,OAKf,KAEAE,EACF3D,EACI,kBAAC,IAAD,CACAD,KAAM,CACFsD,OAAO,CAAC,WAAW,YAAY,UAC/BC,SAAS,CAAC,CACNC,MAAM,SACNG,gBAAgB,CAAC,uBACb,uBACA,wBACA3D,KAAK,CAACC,EAAUyB,MAAMxB,EAAUwB,MAAMvB,EAAOuB,UAGzDmC,QAAS,CACLC,OAAO,CAACC,SAAQ,GAChBC,MAAM,CAACD,SAAQ,EAAKE,KAAK,oBAAD,OAAqBhC,OAInD,KAGN,OACI,yBAAK5B,UAAWC,IAAOC,WAClB0B,EAAU2B,EAASR,I,qDC/BjBc,EA3BO,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,qBAA0B,EAECnB,mBAAS,IAFV,mBAEvCoB,EAFuC,KAErBC,EAFqB,KAW9C,OARAnB,qBAAU,YACQ,uCAAE,sBAAAhB,EAAA,kEACZmC,EADY,SACcxB,IADd,6EAAF,qDAGdM,KACF,CAACkB,IAIC,kBAACC,EAAA,EAAD,CAAajE,UAAWC,IAAOiE,aAC3B,kBAACC,EAAA,EAAD,CAAYC,QAAM,EAACC,GAAG,8CAAtB,aACA,kBAACC,EAAA,EAAD,CAAQC,aAAa,GAAGC,QAAQ,6CAA6CH,GAAG,uCAAuCI,SAAU,SAACC,GAAD,OAAKZ,EAAqBY,EAAEC,OAAOtD,SAChK,kBAACuD,EAAA,EAAD,CAAUvD,MAAM,IAAhB,UACC0C,EAAiB5B,KAAI,SAACP,EAAQiD,GAAT,OAClB,kBAACD,EAAA,EAAD,CAAUE,IAAKD,EACZxD,MAAOO,GACFA,S,mCCabmD,E,4MA5BbC,MAAM,CACJrF,KAAK,GACLiC,QAAQ,I,EAOVkC,qB,uCAAsB,WAAOlC,GAAP,eAAAC,EAAA,sEACKF,EAAUC,GADf,OACdqD,EADc,OAEpB,EAAKC,SAAS,CAACvF,KAAKsF,EAAYrD,QAAQA,IAFpB,2C,wPAHKD,I,OAAnBsD,E,OACNE,KAAKD,SAAS,CAACvF,KAAKsF,I,qIAOb,IAAD,EACgBE,KAAKH,MAApBrF,EADD,EACCA,KAAKiC,EADN,EACMA,QACZ,OACE,yBAAK5B,UAAWC,IAAOC,WACrB,yBAAKkF,IAAKC,IAAaC,IAAI,WAAWtF,UAAWC,IAAOsF,QACxD,kBAAC,EAAD,CAAO5F,KAAMA,IACb,kBAAC,EAAD,CAAcmE,qBAAsBqB,KAAKrB,uBACzC,kBAAC,EAAD,CAAOnE,KAAMA,EAAMiC,QAASA,S,GAvBlB4D,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBExI5BpH,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,aAAe,uC","file":"static/js/main.709d41e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__bEB09\",\"card\":\"Cards_card___I5sg\",\"infected\":\"Cards_infected__1ZuIL\",\"recovered\":\"Cards_recovered__Y7kTQ\",\"deaths\":\"Cards_deaths__3qeae\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading....';\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\" >\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=','/>  \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            {new Date(lastUpdate).toString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=','/>  \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            {new Date(lastUpdate).toString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=','/>  \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            {new Date(lastUpdate).toString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of detahs caused by COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changableURL=url;\r\n    if(country){\r\n        changableURL=`${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changableURL);\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const {data}=await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const countries= async ()=>{\r\n    try {\r\n        const {data:{countries}}= await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);\r\n\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\nconst Chart =({data:{confirmed,deaths,recovered},country})=>{\r\n\r\n    const [dailyData, setDailyData]= useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI= async ()=>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart=(\r\n        dailyData.length ?(\r\n            <Line \r\n            data={{\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data:dailyData.map(({confirmed})=>confirmed),\r\n                    label:'Infected',\r\n                    borderColor:'#3333ff',\r\n                    fill:true,\r\n\r\n                },{\r\n                    data:dailyData.map(({deaths})=>deaths),\r\n                    label:'Deaths',\r\n                    borderColor:'red',\r\n                    backgroundColor:'rgba(255,0,0,0.5)',\r\n                    fill:true,\r\n\r\n                }]\r\n            }}\r\n            />\r\n        ):null\r\n    );         \r\n    const barChart=(\r\n        confirmed?(\r\n            <Bar\r\n            data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:['rgba(0, 0, 255, 0.5)',\r\n                        'rgba(0, 255, 0, 0.5)',\r\n                        'rgba(255, 0, 0, 0.5)'],\r\n                        data:[confirmed.value,recovered.value,deaths.value]\r\n                }],  \r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current state in ${country}`}\r\n            }}\r\n            />\r\n            \r\n        ):null\r\n    );\r\n\r\n    return(\r\n        <div className={styles.container} >\r\n            {country ? barChart:lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { Select, FormControl,InputLabel,MenuItem } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {countries} from '../../api';\r\nconst CountryPicker = ({handaleCountryChange}) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries]= useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI= async()=>{\r\n            setFetchedCountries(await countries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries])\r\n\r\n\r\n    return (\r\n        <FormControl className={styles.formControl} > \r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">Countries</InputLabel>\r\n            <Select defaultValue='' labelId=\"demo-simple-select-placeholder-label-label\" id=\"demo-simple-select-placeholder-label\" onChange={(e)=>handaleCountryChange(e.target.value)} >\r\n                <MenuItem value=''>Global</MenuItem>\r\n                {fetchedCountries.map((country,i)=>\r\n                    <MenuItem key={i}\r\n                       value={country} >\r\n                           {country}\r\n                    </MenuItem>\r\n                )}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React,{Component} from 'react';\nimport {Cards,Chart,CountrPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends Component {\n\n  state={\n    data:{},\n    country:''\n  }\n\n  async componentDidMount(){\n    const fetchedData= await fetchData();\n    this.setState({data:fetchedData});\n  }\n  handaleCountryChange= async (country)=>{\n    const fetchedData= await fetchData(country);\n    this.setState({data:fetchedData,country:country})\n  }\n\n  render(){\n    const {data,country}= this.state;\n    return (\n      <div className={styles.container}>\n        <img src={coronaImage} alt='COVID-19' className={styles.image}/>\n        <Cards data={data}/>\n        <CountrPicker handaleCountryChange={this.handaleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3ATvE\",\"image\":\"App_image__1SJjH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__IcxL5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__W9Vh9\",\"nativeSelect\":\"CountryPicker_nativeSelect__1kM3n\"};"],"sourceRoot":""}